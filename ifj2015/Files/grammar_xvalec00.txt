LL gramatika

1)	<PROGRAM>		->	<FUNC_DEC> <FUNC_DEF> int main() <COMM_SEQ>
2)	<VAR_DEF>		->	<TYPE> id <INIT>;
3)	<VAR_DEF>		->	auto id <INIT_AUTO>;
4)	<INIT>			-> 	= <EXPR>
5)	<INIT>			->	E
6)	<INIT_AUTO>		-> 	= <EXPR>

7)	<TYPE>			->	int
8)	<TYPE>			->	double
9)	<TYPE>			-> 	string

10)	<FUNC_DEF>		-> 	<TYPE> id <PAR_DEF_LIST> <COMM_SEQ>
11)	<FUNC_DEF>		->	E	
12)	<FUNC_DEC>		-> 	<TYPE> id <PAR_DEF_LIST>;
13)	<FUNC_DEC>		->	E
14)	<PAR_DEF_LIST>		->	( <PARAMS> )
15)	<PARAMS>		-> 	<TYPE> id <PARAMS_N>
16)	<PARAMS>		-> 	E
17)	<PARAMS_N>		-> 	, <TYPE> id <PARAMS_N>
18)	<PARAMS_N>		-> 	E

19)	<FUNC_CALL>		->	id = id( <TERMS> );
20)	<TERMS>			-> 	id <TERMS_N>
21)	<TERMS>			-> 	E
22)	<TERMS>			-> 	term <TERMS_N>
23)	<TERMS_N>		-> 	, id <TERMS_N>
24)	<TERMS_N>		-> 	, term <TERMS_N>
25)	<TERMS_N>		-> 	E

26)	<COMM_SEQ>		-> 	{ <STMT_LIST> }
27)	<STMT_LIST>		->	<STMT> <STMT_LIST>
28)	<STMT_LIST>		->	E
29)	<STMT>			->	<ASSIGN>
30)	<STMT>			->	if <EXPR> <COMM_SEQ> <IF_N> //nebo místo <IF_N> - else <COMM_SEQ>
31)	<STMT>			->	for( <VAR_DEF> <EXPR> <FOR_ASSIGN> ) <COMM_SEQ>
32)	<STMT>			->	{ <COMM_SEQ> }
33)	<STMT>			->	<FUNC_CALL>
34)	<STMT>			->	<VAR_DEF>
35)	<STMT>			->	cin >> id <CIN_ID_N>;
36)	<STMT>			->	cout << <COUT_TERM>;
37)	<STMT>			->	<RETURN>

38)	<ASSIGN>		->	id = <EXPR> ;
39)	<FOR_ASSIGN>		->	id = <EXPR>

40)	<CIN_ID_N>		-> 	>> id <CIN_ID_N>
41)	<CIN_ID_N>		-> 	E
42)	<COUT_TERM>		-> 	id <COUT_TERM_N>
43)	<COUT_TERM>		-> 	term <COUT_TERM_N>
44)	<COUT_TERM_N>		-> 	<< id <COUT_TERM_N>
45)	<COUT_TERM_N>		-> 	<< term <COUT_TERM_N>
46)	<COUT_TERM_N>		-> 	E

47)	<RETURN>		->	return <EXPR>;
48)	<IF_N>			->	else <COMM_SEQ>
49)	<IF_N>			->	E


Gramatika pro vırazy

<EXPR>		->	( <EXPR> )
<EXPR>		->	term
<EXPR>		->	id
<EXPR>		->	id( )
<EXPR>		->	id( arg <ARG_N> )
<ARG_N>		->	, arg <ARG_N>
<ARG_N>		->	E
<EXPR>		->	<EXPR> + <EXPR>
<EXPR>		->	<EXPR> - <EXPR>
<EXPR>		->	<EXPR> * <EXPR>
<EXPR>		->	<EXPR> / <EXPR>
<EXPR>		->	<EXPR> < <EXPR>
<EXPR>		->	<EXPR> > <EXPR>
<EXPR>		->	<EXPR> <= <EXPR>
<EXPR>		->	<EXPR> >= <EXPR>
<EXPR>		->	<EXPR> == <EXPR>
<EXPR>		->	<EXPR> != <EXPR>

